The Linux Kernel documentation
This is the top level of the kernel’s documentation tree. Kernel documentation, like the kernel itself, is very much a work in progress; that is especially true as we work to integrate our many scattered documents into a coherent whole. Please note that improvements to the documentation are welcome; join the linux-doc list at vger.kernel.org if you want to help out.

Working with the development community
The essential guides for interacting with the kernel’s development community and getting your work upstream.

Development process
Submitting patches
Code of conduct
Maintainer handbook
All development-process docs
Internal API manuals
Manuals for use by developers working to interface with the rest of the kernel.

Core API
Driver APIs
Subsystems
Locking
Welcome to The Linux Kernel’s documentation
This is the top level of the kernel’s documentation tree. Kernel documentation, like the kernel itself, is very much a work in progress; that is especially true as we work to integrate our many scattered documents into a coherent whole. Please note that improvements to the documentation are welcome; join the linux-doc list at vger.kernel.org if you want to help out.

User-oriented documentation
The following manuals are written for users of the kernel — those who are trying to get it to work optimally on a given system.

The Linux kernel user’s and administrator’s guide
Linux kernel release 4.x <http://kernel.org/>
The kernel’s command-line parameters
Linux allocated devices (4.x+ version)
Reporting bugs
Security bugs
Bug hunting
Bisecting a bug
Tainted kernels
Ramoops oops/panic logger
Dynamic debug
Explaining the dreaded “No init found.” boot hang message
Rules on how to access information in sysfs
Using the initial RAM disk (initrd)
Linux Serial Console
Linux Braille Console
Parport
RAID arrays
Kernel module signing facility
Linux Magic System Request Key Hacks
Unicode support
Software cursor for VGA
Kernel Support for miscellaneous (your favourite) Binary Formats v1.1
Mono(tm) Binary Kernel Support for Linux
Java(tm) Binary Kernel Support for Linux v1.03
Reliability, Availability and Serviceability
Introduction to kernel development
These manuals contain overall information about how to develop the kernel. The kernel community is quite large, with thousands of developers contributing over the course of a year. As with any large community, knowing how things are done will make the process of getting your changes merged much easier.

Working with the kernel development community
HOWTO do Linux kernel development
Code of Conflict
A guide to the Kernel Development Process
Submitting patches: the essential guide to getting your code into the kernel
Linux kernel coding style
Email clients info for Linux
Minimal requirements to compile the Kernel
Submitting Drivers For The Linux Kernel
The Linux Kernel Driver Interface
Linux kernel management style
Everything you ever wanted to know about Linux -stable releases
Linux Kernel patch submission checklist
Index of Documentation for People Interested in Writing and/or Understanding the Linux Kernel
Applying Patches To The Linux Kernel
Adding a New System Call
Linux magic numbers
Why the “volatile” type class should not be used
Development tools for the kernel
Coccinelle
Sparse
kcov: code coverage for fuzzing
Using gcov with the Linux kernel
The Kernel Address Sanitizer (KASAN)
The Undefined Behavior Sanitizer - UBSAN
Kernel Memory Leak Detector
Getting started with kmemcheck
Debugging kernel and modules via gdb
How to write kernel documentation
Introduction
Sphinx Build
Writing Documentation
Including kernel-doc comments
Writing kernel-doc comments
Including uAPI header files
DocBook XML [DEPRECATED]
